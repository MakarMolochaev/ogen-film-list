// Code generated by ogen, DO NOT EDIT.

package filmsapi

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateFilm implements createFilm operation.
	//
	// Создает новую запись о фильме.
	//
	// POST /films
	CreateFilm(ctx context.Context, req *CreateFilmRequest) (CreateFilmRes, error)
	// DeleteFilm implements deleteFilm operation.
	//
	// Удаляет фильм из системы.
	//
	// DELETE /films/{id}
	DeleteFilm(ctx context.Context, params DeleteFilmParams) (DeleteFilmRes, error)
	// GetFilm implements getFilm operation.
	//
	// Возвращает полную информацию о фильме.
	//
	// GET /films/{id}
	GetFilm(ctx context.Context, params GetFilmParams) (GetFilmRes, error)
	// ListFilms implements listFilms operation.
	//
	// Возвращает список всех фильмов с возможностью
	// пагинации.
	//
	// GET /films
	ListFilms(ctx context.Context, params ListFilmsParams) (ListFilmsRes, error)
	// UpdateFilm implements updateFilm operation.
	//
	// Полностью обновляет информацию о фильме.
	//
	// PUT /films/{id}
	UpdateFilm(ctx context.Context, req *UpdateFilmRequest, params UpdateFilmParams) (UpdateFilmRes, error)
	// NewError creates *DefaultErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *DefaultErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
