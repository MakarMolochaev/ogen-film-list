// Code generated by ogen, DO NOT EDIT.

package filmsapi

import (
	"fmt"

	"github.com/go-faster/errors"
	"github.com/google/uuid"
)

func (s *DefaultErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

type CreateFilmBadRequest Error

func (*CreateFilmBadRequest) createFilmRes() {}

type CreateFilmInternalServerError Error

func (*CreateFilmInternalServerError) createFilmRes() {}

// Данные для создания нового фильма.
// Ref: #/components/schemas/CreateFilmRequest
type CreateFilmRequest struct {
	// Название фильма.
	Title string `json:"title"`
	// Год выпуска фильма.
	Year int `json:"year"`
	// Страна производства.
	Country string `json:"country"`
	// Режиссёр.
	Director string `json:"director"`
	// Возрастное ограничение.
	AgeRating CreateFilmRequestAgeRating `json:"age_rating"`
	Duration  int                        `json:"duration"`
}

// GetTitle returns the value of Title.
func (s *CreateFilmRequest) GetTitle() string {
	return s.Title
}

// GetYear returns the value of Year.
func (s *CreateFilmRequest) GetYear() int {
	return s.Year
}

// GetCountry returns the value of Country.
func (s *CreateFilmRequest) GetCountry() string {
	return s.Country
}

// GetDirector returns the value of Director.
func (s *CreateFilmRequest) GetDirector() string {
	return s.Director
}

// GetAgeRating returns the value of AgeRating.
func (s *CreateFilmRequest) GetAgeRating() CreateFilmRequestAgeRating {
	return s.AgeRating
}

// GetDuration returns the value of Duration.
func (s *CreateFilmRequest) GetDuration() int {
	return s.Duration
}

// SetTitle sets the value of Title.
func (s *CreateFilmRequest) SetTitle(val string) {
	s.Title = val
}

// SetYear sets the value of Year.
func (s *CreateFilmRequest) SetYear(val int) {
	s.Year = val
}

// SetCountry sets the value of Country.
func (s *CreateFilmRequest) SetCountry(val string) {
	s.Country = val
}

// SetDirector sets the value of Director.
func (s *CreateFilmRequest) SetDirector(val string) {
	s.Director = val
}

// SetAgeRating sets the value of AgeRating.
func (s *CreateFilmRequest) SetAgeRating(val CreateFilmRequestAgeRating) {
	s.AgeRating = val
}

// SetDuration sets the value of Duration.
func (s *CreateFilmRequest) SetDuration(val int) {
	s.Duration = val
}

// Возрастное ограничение.
type CreateFilmRequestAgeRating string

const (
	CreateFilmRequestAgeRating0  CreateFilmRequestAgeRating = "0+"
	CreateFilmRequestAgeRating6  CreateFilmRequestAgeRating = "6+"
	CreateFilmRequestAgeRating12 CreateFilmRequestAgeRating = "12+"
	CreateFilmRequestAgeRating16 CreateFilmRequestAgeRating = "16+"
	CreateFilmRequestAgeRating18 CreateFilmRequestAgeRating = "18+"
)

// AllValues returns all CreateFilmRequestAgeRating values.
func (CreateFilmRequestAgeRating) AllValues() []CreateFilmRequestAgeRating {
	return []CreateFilmRequestAgeRating{
		CreateFilmRequestAgeRating0,
		CreateFilmRequestAgeRating6,
		CreateFilmRequestAgeRating12,
		CreateFilmRequestAgeRating16,
		CreateFilmRequestAgeRating18,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateFilmRequestAgeRating) MarshalText() ([]byte, error) {
	switch s {
	case CreateFilmRequestAgeRating0:
		return []byte(s), nil
	case CreateFilmRequestAgeRating6:
		return []byte(s), nil
	case CreateFilmRequestAgeRating12:
		return []byte(s), nil
	case CreateFilmRequestAgeRating16:
		return []byte(s), nil
	case CreateFilmRequestAgeRating18:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateFilmRequestAgeRating) UnmarshalText(data []byte) error {
	switch CreateFilmRequestAgeRating(data) {
	case CreateFilmRequestAgeRating0:
		*s = CreateFilmRequestAgeRating0
		return nil
	case CreateFilmRequestAgeRating6:
		*s = CreateFilmRequestAgeRating6
		return nil
	case CreateFilmRequestAgeRating12:
		*s = CreateFilmRequestAgeRating12
		return nil
	case CreateFilmRequestAgeRating16:
		*s = CreateFilmRequestAgeRating16
		return nil
	case CreateFilmRequestAgeRating18:
		*s = CreateFilmRequestAgeRating18
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// DefaultErrorStatusCode wraps Error with StatusCode.
type DefaultErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *DefaultErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *DefaultErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *DefaultErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *DefaultErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

type DeleteFilmBadRequest Error

func (*DeleteFilmBadRequest) deleteFilmRes() {}

type DeleteFilmInternalServerError Error

func (*DeleteFilmInternalServerError) deleteFilmRes() {}

// DeleteFilmNoContent is response for DeleteFilm operation.
type DeleteFilmNoContent struct{}

func (*DeleteFilmNoContent) deleteFilmRes() {}

// DeleteFilmNotFound is response for DeleteFilm operation.
type DeleteFilmNotFound struct{}

func (*DeleteFilmNotFound) deleteFilmRes() {}

// Ref: #/components/schemas/Error
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *Error) GetCode() int32 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val int32) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// Полное представление фильма в системе.
// Ref: #/components/schemas/Film
type Film struct {
	// Уникальный идентификатор фильма.
	ID uuid.UUID `json:"id"`
	// Название фильма.
	Title string `json:"title"`
	// Год выпуска фильма.
	Year int `json:"year"`
	// Страна производства.
	Country string `json:"country"`
	// Рейтинг фильма.
	Rating float32 `json:"rating"`
	// Список актёров.
	Actors []string `json:"actors"`
	// Режиссёр.
	Director string `json:"director"`
	// Возрастное ограничение.
	AgeRating FilmAgeRating `json:"age_rating"`
	Duration  int           `json:"duration"`
}

// GetID returns the value of ID.
func (s *Film) GetID() uuid.UUID {
	return s.ID
}

// GetTitle returns the value of Title.
func (s *Film) GetTitle() string {
	return s.Title
}

// GetYear returns the value of Year.
func (s *Film) GetYear() int {
	return s.Year
}

// GetCountry returns the value of Country.
func (s *Film) GetCountry() string {
	return s.Country
}

// GetRating returns the value of Rating.
func (s *Film) GetRating() float32 {
	return s.Rating
}

// GetActors returns the value of Actors.
func (s *Film) GetActors() []string {
	return s.Actors
}

// GetDirector returns the value of Director.
func (s *Film) GetDirector() string {
	return s.Director
}

// GetAgeRating returns the value of AgeRating.
func (s *Film) GetAgeRating() FilmAgeRating {
	return s.AgeRating
}

// GetDuration returns the value of Duration.
func (s *Film) GetDuration() int {
	return s.Duration
}

// SetID sets the value of ID.
func (s *Film) SetID(val uuid.UUID) {
	s.ID = val
}

// SetTitle sets the value of Title.
func (s *Film) SetTitle(val string) {
	s.Title = val
}

// SetYear sets the value of Year.
func (s *Film) SetYear(val int) {
	s.Year = val
}

// SetCountry sets the value of Country.
func (s *Film) SetCountry(val string) {
	s.Country = val
}

// SetRating sets the value of Rating.
func (s *Film) SetRating(val float32) {
	s.Rating = val
}

// SetActors sets the value of Actors.
func (s *Film) SetActors(val []string) {
	s.Actors = val
}

// SetDirector sets the value of Director.
func (s *Film) SetDirector(val string) {
	s.Director = val
}

// SetAgeRating sets the value of AgeRating.
func (s *Film) SetAgeRating(val FilmAgeRating) {
	s.AgeRating = val
}

// SetDuration sets the value of Duration.
func (s *Film) SetDuration(val int) {
	s.Duration = val
}

func (*Film) createFilmRes() {}
func (*Film) getFilmRes()    {}
func (*Film) updateFilmRes() {}

// Возрастное ограничение.
type FilmAgeRating string

const (
	FilmAgeRating0  FilmAgeRating = "0+"
	FilmAgeRating6  FilmAgeRating = "6+"
	FilmAgeRating12 FilmAgeRating = "12+"
	FilmAgeRating16 FilmAgeRating = "16+"
	FilmAgeRating18 FilmAgeRating = "18+"
)

// AllValues returns all FilmAgeRating values.
func (FilmAgeRating) AllValues() []FilmAgeRating {
	return []FilmAgeRating{
		FilmAgeRating0,
		FilmAgeRating6,
		FilmAgeRating12,
		FilmAgeRating16,
		FilmAgeRating18,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FilmAgeRating) MarshalText() ([]byte, error) {
	switch s {
	case FilmAgeRating0:
		return []byte(s), nil
	case FilmAgeRating6:
		return []byte(s), nil
	case FilmAgeRating12:
		return []byte(s), nil
	case FilmAgeRating16:
		return []byte(s), nil
	case FilmAgeRating18:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FilmAgeRating) UnmarshalText(data []byte) error {
	switch FilmAgeRating(data) {
	case FilmAgeRating0:
		*s = FilmAgeRating0
		return nil
	case FilmAgeRating6:
		*s = FilmAgeRating6
		return nil
	case FilmAgeRating12:
		*s = FilmAgeRating12
		return nil
	case FilmAgeRating16:
		*s = FilmAgeRating16
		return nil
	case FilmAgeRating18:
		*s = FilmAgeRating18
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetFilmBadRequest Error

func (*GetFilmBadRequest) getFilmRes() {}

type GetFilmInternalServerError Error

func (*GetFilmInternalServerError) getFilmRes() {}

// GetFilmNotFound is response for GetFilm operation.
type GetFilmNotFound struct{}

func (*GetFilmNotFound) getFilmRes() {}

type ListFilmsBadRequest Error

func (*ListFilmsBadRequest) listFilmsRes() {}

type ListFilmsInternalServerError Error

func (*ListFilmsInternalServerError) listFilmsRes() {}

type ListFilmsOKApplicationJSON []Film

func (*ListFilmsOKApplicationJSON) listFilmsRes() {}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type UpdateFilmBadRequest Error

func (*UpdateFilmBadRequest) updateFilmRes() {}

type UpdateFilmInternalServerError Error

func (*UpdateFilmInternalServerError) updateFilmRes() {}

// Данные для обновления фильма.
// Ref: #/components/schemas/UpdateFilmRequest
type UpdateFilmRequest struct {
	// Название фильма.
	Title string `json:"title"`
	// Год выпуска фильма.
	Year int `json:"year"`
	// Страна производства.
	Country string `json:"country"`
	// Рейтинг фильма.
	Rating float32 `json:"rating"`
	// Список актёров.
	Actors []string `json:"actors"`
	// Режиссёр.
	Director string `json:"director"`
	// Возрастное ограничение.
	AgeRating UpdateFilmRequestAgeRating `json:"age_rating"`
	Duration  int                        `json:"duration"`
}

// GetTitle returns the value of Title.
func (s *UpdateFilmRequest) GetTitle() string {
	return s.Title
}

// GetYear returns the value of Year.
func (s *UpdateFilmRequest) GetYear() int {
	return s.Year
}

// GetCountry returns the value of Country.
func (s *UpdateFilmRequest) GetCountry() string {
	return s.Country
}

// GetRating returns the value of Rating.
func (s *UpdateFilmRequest) GetRating() float32 {
	return s.Rating
}

// GetActors returns the value of Actors.
func (s *UpdateFilmRequest) GetActors() []string {
	return s.Actors
}

// GetDirector returns the value of Director.
func (s *UpdateFilmRequest) GetDirector() string {
	return s.Director
}

// GetAgeRating returns the value of AgeRating.
func (s *UpdateFilmRequest) GetAgeRating() UpdateFilmRequestAgeRating {
	return s.AgeRating
}

// GetDuration returns the value of Duration.
func (s *UpdateFilmRequest) GetDuration() int {
	return s.Duration
}

// SetTitle sets the value of Title.
func (s *UpdateFilmRequest) SetTitle(val string) {
	s.Title = val
}

// SetYear sets the value of Year.
func (s *UpdateFilmRequest) SetYear(val int) {
	s.Year = val
}

// SetCountry sets the value of Country.
func (s *UpdateFilmRequest) SetCountry(val string) {
	s.Country = val
}

// SetRating sets the value of Rating.
func (s *UpdateFilmRequest) SetRating(val float32) {
	s.Rating = val
}

// SetActors sets the value of Actors.
func (s *UpdateFilmRequest) SetActors(val []string) {
	s.Actors = val
}

// SetDirector sets the value of Director.
func (s *UpdateFilmRequest) SetDirector(val string) {
	s.Director = val
}

// SetAgeRating sets the value of AgeRating.
func (s *UpdateFilmRequest) SetAgeRating(val UpdateFilmRequestAgeRating) {
	s.AgeRating = val
}

// SetDuration sets the value of Duration.
func (s *UpdateFilmRequest) SetDuration(val int) {
	s.Duration = val
}

// Возрастное ограничение.
type UpdateFilmRequestAgeRating string

const (
	UpdateFilmRequestAgeRating0  UpdateFilmRequestAgeRating = "0+"
	UpdateFilmRequestAgeRating6  UpdateFilmRequestAgeRating = "6+"
	UpdateFilmRequestAgeRating12 UpdateFilmRequestAgeRating = "12+"
	UpdateFilmRequestAgeRating16 UpdateFilmRequestAgeRating = "16+"
	UpdateFilmRequestAgeRating18 UpdateFilmRequestAgeRating = "18+"
)

// AllValues returns all UpdateFilmRequestAgeRating values.
func (UpdateFilmRequestAgeRating) AllValues() []UpdateFilmRequestAgeRating {
	return []UpdateFilmRequestAgeRating{
		UpdateFilmRequestAgeRating0,
		UpdateFilmRequestAgeRating6,
		UpdateFilmRequestAgeRating12,
		UpdateFilmRequestAgeRating16,
		UpdateFilmRequestAgeRating18,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateFilmRequestAgeRating) MarshalText() ([]byte, error) {
	switch s {
	case UpdateFilmRequestAgeRating0:
		return []byte(s), nil
	case UpdateFilmRequestAgeRating6:
		return []byte(s), nil
	case UpdateFilmRequestAgeRating12:
		return []byte(s), nil
	case UpdateFilmRequestAgeRating16:
		return []byte(s), nil
	case UpdateFilmRequestAgeRating18:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateFilmRequestAgeRating) UnmarshalText(data []byte) error {
	switch UpdateFilmRequestAgeRating(data) {
	case UpdateFilmRequestAgeRating0:
		*s = UpdateFilmRequestAgeRating0
		return nil
	case UpdateFilmRequestAgeRating6:
		*s = UpdateFilmRequestAgeRating6
		return nil
	case UpdateFilmRequestAgeRating12:
		*s = UpdateFilmRequestAgeRating12
		return nil
	case UpdateFilmRequestAgeRating16:
		*s = UpdateFilmRequestAgeRating16
		return nil
	case UpdateFilmRequestAgeRating18:
		*s = UpdateFilmRequestAgeRating18
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}
